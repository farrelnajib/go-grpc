package discount

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type DiscountORM struct {
	EndDate   *time.Time
	Id        string    `gorm:"primary_key"`
	Rows      []*RowORM `gorm:"foreignkey:DiscountId;association_foreignkey:Id"`
	StartDate *time.Time
	Title     string
}

// TableName overrides the default tablename generated by GORM
func (DiscountORM) TableName() string {
	return "discounts"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Discount) ToORM(ctx context.Context) (DiscountORM, error) {
	to := DiscountORM{}
	var err error
	if prehook, ok := interface{}(m).(DiscountWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Title = m.Title
	if m.StartDate != nil {
		t := m.StartDate.AsTime()
		to.StartDate = &t
	}
	if m.EndDate != nil {
		t := m.EndDate.AsTime()
		to.EndDate = &t
	}
	for _, v := range m.Rows {
		if v != nil {
			if tempRows, cErr := v.ToORM(ctx); cErr == nil {
				to.Rows = append(to.Rows, &tempRows)
			} else {
				return to, cErr
			}
		} else {
			to.Rows = append(to.Rows, nil)
		}
	}
	if posthook, ok := interface{}(m).(DiscountWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *DiscountORM) ToPB(ctx context.Context) (Discount, error) {
	to := Discount{}
	var err error
	if prehook, ok := interface{}(m).(DiscountWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Title = m.Title
	if m.StartDate != nil {
		to.StartDate = timestamppb.New(*m.StartDate)
	}
	if m.EndDate != nil {
		to.EndDate = timestamppb.New(*m.EndDate)
	}
	for _, v := range m.Rows {
		if v != nil {
			if tempRows, cErr := v.ToPB(ctx); cErr == nil {
				to.Rows = append(to.Rows, &tempRows)
			} else {
				return to, cErr
			}
		} else {
			to.Rows = append(to.Rows, nil)
		}
	}
	if posthook, ok := interface{}(m).(DiscountWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Discount the arg will be the target, the caller the one being converted from

// DiscountBeforeToORM called before default ToORM code
type DiscountWithBeforeToORM interface {
	BeforeToORM(context.Context, *DiscountORM) error
}

// DiscountAfterToORM called after default ToORM code
type DiscountWithAfterToORM interface {
	AfterToORM(context.Context, *DiscountORM) error
}

// DiscountBeforeToPB called before default ToPB code
type DiscountWithBeforeToPB interface {
	BeforeToPB(context.Context, *Discount) error
}

// DiscountAfterToPB called after default ToPB code
type DiscountWithAfterToPB interface {
	AfterToPB(context.Context, *Discount) error
}

type RowORM struct {
	DiscountId *string
	SKU        string
	Value      int64
}

// TableName overrides the default tablename generated by GORM
func (RowORM) TableName() string {
	return "rows"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Row) ToORM(ctx context.Context) (RowORM, error) {
	to := RowORM{}
	var err error
	if prehook, ok := interface{}(m).(RowWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.SKU = m.SKU
	to.Value = m.Value
	if posthook, ok := interface{}(m).(RowWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *RowORM) ToPB(ctx context.Context) (Row, error) {
	to := Row{}
	var err error
	if prehook, ok := interface{}(m).(RowWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.SKU = m.SKU
	to.Value = m.Value
	if posthook, ok := interface{}(m).(RowWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Row the arg will be the target, the caller the one being converted from

// RowBeforeToORM called before default ToORM code
type RowWithBeforeToORM interface {
	BeforeToORM(context.Context, *RowORM) error
}

// RowAfterToORM called after default ToORM code
type RowWithAfterToORM interface {
	AfterToORM(context.Context, *RowORM) error
}

// RowBeforeToPB called before default ToPB code
type RowWithBeforeToPB interface {
	BeforeToPB(context.Context, *Row) error
}

// RowAfterToPB called after default ToPB code
type RowWithAfterToPB interface {
	AfterToPB(context.Context, *Row) error
}

// DefaultCreateDiscount executes a basic gorm create call
func DefaultCreateDiscount(ctx context.Context, in *Discount, db *gorm.DB) (*Discount, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type DiscountORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DiscountORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadDiscount(ctx context.Context, in *Discount, db *gorm.DB) (*Discount, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &DiscountORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := DiscountORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(DiscountORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type DiscountORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DiscountORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DiscountORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteDiscount(ctx context.Context, in *Discount, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&DiscountORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type DiscountORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DiscountORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteDiscountSet(ctx context.Context, in []*Discount, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&DiscountORM{})).(DiscountORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&DiscountORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&DiscountORM{})).(DiscountORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type DiscountORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Discount, *gorm.DB) (*gorm.DB, error)
}
type DiscountORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Discount, *gorm.DB) error
}

// DefaultStrictUpdateDiscount clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateDiscount(ctx context.Context, in *Discount, db *gorm.DB) (*Discount, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateDiscount")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &DiscountORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(DiscountORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterRows := RowORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterRows.DiscountId = new(string)
	*filterRows.DiscountId = ormObj.Id
	if err = db.Where(filterRows).Delete(RowORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type DiscountORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DiscountORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DiscountORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchDiscount executes a basic gorm update call with patch behavior
func DefaultPatchDiscount(ctx context.Context, in *Discount, updateMask *field_mask.FieldMask, db *gorm.DB) (*Discount, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Discount
	var err error
	if hook, ok := interface{}(&pbObj).(DiscountWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadDiscount(ctx, &Discount{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(DiscountWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskDiscount(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(DiscountWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateDiscount(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(DiscountWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type DiscountWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Discount, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DiscountWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Discount, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DiscountWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Discount, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type DiscountWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Discount, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetDiscount executes a bulk gorm update call with patch behavior
func DefaultPatchSetDiscount(ctx context.Context, objects []*Discount, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Discount, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Discount, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchDiscount(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskDiscount patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskDiscount(ctx context.Context, patchee *Discount, patcher *Discount, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Discount, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedStartDate bool
	var updatedEndDate bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Title" {
			patchee.Title = patcher.Title
			continue
		}
		if !updatedStartDate && strings.HasPrefix(f, prefix+"StartDate.") {
			if patcher.StartDate == nil {
				patchee.StartDate = nil
				continue
			}
			if patchee.StartDate == nil {
				patchee.StartDate = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"StartDate."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.StartDate, patchee.StartDate, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"StartDate" {
			updatedStartDate = true
			patchee.StartDate = patcher.StartDate
			continue
		}
		if !updatedEndDate && strings.HasPrefix(f, prefix+"EndDate.") {
			if patcher.EndDate == nil {
				patchee.EndDate = nil
				continue
			}
			if patchee.EndDate == nil {
				patchee.EndDate = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"EndDate."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.EndDate, patchee.EndDate, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"EndDate" {
			updatedEndDate = true
			patchee.EndDate = patcher.EndDate
			continue
		}
		if f == prefix+"Rows" {
			patchee.Rows = patcher.Rows
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListDiscount executes a gorm list call
func DefaultListDiscount(ctx context.Context, db *gorm.DB) ([]*Discount, error) {
	in := Discount{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &DiscountORM{}, &Discount{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []DiscountORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(DiscountORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Discount{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type DiscountORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DiscountORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type DiscountORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]DiscountORM) error
}

// DefaultCreateRow executes a basic gorm create call
func DefaultCreateRow(ctx context.Context, in *Row, db *gorm.DB) (*Row, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RowORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RowORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type RowORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RowORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskRow patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskRow(ctx context.Context, patchee *Row, patcher *Row, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Row, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"SKU" {
			patchee.SKU = patcher.SKU
			continue
		}
		if f == prefix+"Value" {
			patchee.Value = patcher.Value
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListRow executes a gorm list call
func DefaultListRow(ctx context.Context, db *gorm.DB) ([]*Row, error) {
	in := Row{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RowORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &RowORM{}, &Row{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RowORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []RowORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(RowORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Row{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type RowORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RowORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type RowORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]RowORM) error
}
