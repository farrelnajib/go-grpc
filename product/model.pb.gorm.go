package product

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

type ProductORM struct {
	Description    string
	Id             string `gorm:"primary_key"`
	Name           string
	ProductVariant []*ProductVariantORM `gorm:"foreignkey:ProductId;association_foreignkey:Id"`
	Slug           string
}

// TableName overrides the default tablename generated by GORM
func (ProductORM) TableName() string {
	return "products"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Product) ToORM(ctx context.Context) (ProductORM, error) {
	to := ProductORM{}
	var err error
	if prehook, ok := interface{}(m).(ProductWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Slug = m.Slug
	to.Name = m.Name
	to.Description = m.Description
	for _, v := range m.ProductVariant {
		if v != nil {
			if tempProductVariant, cErr := v.ToORM(ctx); cErr == nil {
				to.ProductVariant = append(to.ProductVariant, &tempProductVariant)
			} else {
				return to, cErr
			}
		} else {
			to.ProductVariant = append(to.ProductVariant, nil)
		}
	}
	if posthook, ok := interface{}(m).(ProductWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ProductORM) ToPB(ctx context.Context) (Product, error) {
	to := Product{}
	var err error
	if prehook, ok := interface{}(m).(ProductWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Slug = m.Slug
	to.Name = m.Name
	to.Description = m.Description
	for _, v := range m.ProductVariant {
		if v != nil {
			if tempProductVariant, cErr := v.ToPB(ctx); cErr == nil {
				to.ProductVariant = append(to.ProductVariant, &tempProductVariant)
			} else {
				return to, cErr
			}
		} else {
			to.ProductVariant = append(to.ProductVariant, nil)
		}
	}
	if posthook, ok := interface{}(m).(ProductWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Product the arg will be the target, the caller the one being converted from

// ProductBeforeToORM called before default ToORM code
type ProductWithBeforeToORM interface {
	BeforeToORM(context.Context, *ProductORM) error
}

// ProductAfterToORM called after default ToORM code
type ProductWithAfterToORM interface {
	AfterToORM(context.Context, *ProductORM) error
}

// ProductBeforeToPB called before default ToPB code
type ProductWithBeforeToPB interface {
	BeforeToPB(context.Context, *Product) error
}

// ProductAfterToPB called after default ToPB code
type ProductWithAfterToPB interface {
	AfterToPB(context.Context, *Product) error
}

type ProductVariantORM struct {
	Price     int64
	ProductId *string
	SKU       string `gorm:"unique"`
}

// TableName overrides the default tablename generated by GORM
func (ProductVariantORM) TableName() string {
	return "product_variants"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *ProductVariant) ToORM(ctx context.Context) (ProductVariantORM, error) {
	to := ProductVariantORM{}
	var err error
	if prehook, ok := interface{}(m).(ProductVariantWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.SKU = m.SKU
	to.Price = m.Price
	if posthook, ok := interface{}(m).(ProductVariantWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ProductVariantORM) ToPB(ctx context.Context) (ProductVariant, error) {
	to := ProductVariant{}
	var err error
	if prehook, ok := interface{}(m).(ProductVariantWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.SKU = m.SKU
	to.Price = m.Price
	if posthook, ok := interface{}(m).(ProductVariantWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type ProductVariant the arg will be the target, the caller the one being converted from

// ProductVariantBeforeToORM called before default ToORM code
type ProductVariantWithBeforeToORM interface {
	BeforeToORM(context.Context, *ProductVariantORM) error
}

// ProductVariantAfterToORM called after default ToORM code
type ProductVariantWithAfterToORM interface {
	AfterToORM(context.Context, *ProductVariantORM) error
}

// ProductVariantBeforeToPB called before default ToPB code
type ProductVariantWithBeforeToPB interface {
	BeforeToPB(context.Context, *ProductVariant) error
}

// ProductVariantAfterToPB called after default ToPB code
type ProductVariantWithAfterToPB interface {
	AfterToPB(context.Context, *ProductVariant) error
}

// DefaultCreateProduct executes a basic gorm create call
func DefaultCreateProduct(ctx context.Context, in *Product, db *gorm.DB) (*Product, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ProductORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadProduct(ctx context.Context, in *Product, db *gorm.DB) (*Product, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &ProductORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ProductORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ProductORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ProductORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteProduct(ctx context.Context, in *Product, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ProductORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ProductORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteProductSet(ctx context.Context, in []*Product, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ProductORM{})).(ProductORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ProductORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ProductORM{})).(ProductORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ProductORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Product, *gorm.DB) (*gorm.DB, error)
}
type ProductORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Product, *gorm.DB) error
}

// DefaultStrictUpdateProduct clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateProduct(ctx context.Context, in *Product, db *gorm.DB) (*Product, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateProduct")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ProductORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ProductORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterProductVariant := ProductVariantORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterProductVariant.ProductId = new(string)
	*filterProductVariant.ProductId = ormObj.Id
	if err = db.Where(filterProductVariant).Delete(ProductVariantORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ProductORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchProduct executes a basic gorm update call with patch behavior
func DefaultPatchProduct(ctx context.Context, in *Product, updateMask *field_mask.FieldMask, db *gorm.DB) (*Product, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Product
	var err error
	if hook, ok := interface{}(&pbObj).(ProductWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadProduct(ctx, &Product{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ProductWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskProduct(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ProductWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateProduct(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ProductWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ProductWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Product, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProductWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Product, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProductWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Product, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type ProductWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Product, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetProduct executes a bulk gorm update call with patch behavior
func DefaultPatchSetProduct(ctx context.Context, objects []*Product, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Product, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Product, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchProduct(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskProduct patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskProduct(ctx context.Context, patchee *Product, patcher *Product, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Product, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Slug" {
			patchee.Slug = patcher.Slug
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"ProductVariant" {
			patchee.ProductVariant = patcher.ProductVariant
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListProduct executes a gorm list call
func DefaultListProduct(ctx context.Context, db *gorm.DB) ([]*Product, error) {
	in := Product{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ProductORM{}, &Product{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ProductORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Product{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ProductORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ProductORM) error
}

// DefaultCreateProductVariant executes a basic gorm create call
func DefaultCreateProductVariant(ctx context.Context, in *ProductVariant, db *gorm.DB) (*ProductVariant, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductVariantORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductVariantORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ProductVariantORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductVariantORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskProductVariant patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskProductVariant(ctx context.Context, patchee *ProductVariant, patcher *ProductVariant, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*ProductVariant, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"SKU" {
			patchee.SKU = patcher.SKU
			continue
		}
		if f == prefix+"Price" {
			patchee.Price = patcher.Price
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListProductVariant executes a gorm list call
func DefaultListProductVariant(ctx context.Context, db *gorm.DB) ([]*ProductVariant, error) {
	in := ProductVariant{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductVariantORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ProductVariantORM{}, &ProductVariant{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductVariantORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []ProductVariantORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ProductVariantORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*ProductVariant{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ProductVariantORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductVariantORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ProductVariantORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ProductVariantORM) error
}
